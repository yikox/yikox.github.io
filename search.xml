<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>多线程笔记</title>
      <link href="/2022/01/11/duo-xian-cheng-bi-ji/"/>
      <url>/2022/01/11/duo-xian-cheng-bi-ji/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GDB调试笔记</title>
      <link href="/2022/01/06/gdb-diao-shi-bi-ji/"/>
      <url>/2022/01/06/gdb-diao-shi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>使用GDB在编译时需要加上-g，没有-g将看不见函数名，变量名，取代的是内存地址</p><h5 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h5><ul><li><p><code>gdb+执行文件/路径</code></p></li><li><p><code>gdb+执行文件+core文件</code></p></li><li><p><code>gdb+执行文件+PID（进程ID</code></p></li></ul><h5 id="调试已经运行的程序："><a href="#调试已经运行的程序：" class="headerlink" title="调试已经运行的程序："></a>调试已经运行的程序：</h5><ul><li>ps查看程序运行的PID，然后用上面的命令<code>gdb+执行文件+PID</code>（进程ID）</li><li>先用<code>pdb+执行文件</code> 关联上源代码，再用<code>attach</code>挂接进程的PID，用<code>detach</code>取消挂接的进程。</li></ul><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>l(list)</td><td>从第一行列出代码</td></tr><tr><td>break+行号</td><td>从16行设置断点</td></tr><tr><td>break func</td><td>设置断点在func入口处</td></tr><tr><td>info break</td><td>查看断点信息</td></tr><tr><td>r (run)</td><td>运行程序</td></tr><tr><td>n(next)</td><td>执行下一句，不会进入函数</td></tr><tr><td>s(step)</td><td>执行下一句，会进入函数</td></tr><tr><td>c(continue)</td><td>继续运行程序</td></tr><tr><td>p 变量名(print 变量名)</td><td>打印变量i的值</td></tr><tr><td>bt</td><td>查看函数堆栈</td></tr><tr><td>finish</td><td>退出函数</td></tr><tr><td>q</td><td>退出GDB</td></tr><tr><td>s(symbols)+file</td><td>从指定文件中读取符号表</td></tr><tr><td>c/core file</td><td>调试时core dump的core文件</td></tr><tr><td>d/directory file</td><td>加入一个源文件的搜索路径</td></tr></tbody></table><p><code>until</code>运行命令到退出循环体</p><p><code>stepi</code>和<code>nexti</code>单步执行一条机器指令</p><ul><li><p>打印结构体分行显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set print pretty on </span><br></pre></td></tr></table></figure></li></ul><h3 id="暂停程序"><a href="#暂停程序" class="headerlink" title="暂停程序"></a>暂停程序</h3><h5 id="停止点"><a href="#停止点" class="headerlink" title="停止点"></a>停止点</h5><ul><li><p>断点<code>break+行号/函数</code></p></li><li><p><em>可以通过条件设置（break if 条件）</em>*</p></li><li><p><em>修改条件可以通过 condition+断点号+新条件</em>*</p></li><li><p>观察点<code>watch+变量名</code>（值发生变化会暂停）</p><ul><li><code>rwatch +变量名</code>（变量被读时暂停）</li><li><code>awatch+变量名</code>（读和写）</li></ul></li><li><p>捕捉点<code>catch</code></p></li></ul><h5 id="停止点维护"><a href="#停止点维护" class="headerlink" title="停止点维护"></a>停止点维护</h5><p>  <code>clear</code>清除所有停止点，可以加行号，函数指定清除的点<br>  <code>delete +断点号+范围</code><br>  <u><strong>clear和delete有啥区别</strong></u><br>  <code>disable和enable</code> 关掉和启动停止点</p><h5 id="特殊命令："><a href="#特殊命令：" class="headerlink" title="特殊命令："></a>特殊命令：</h5><ul><li><code>ignore+断点号+次数</code>程序运行时忽略该断点次数</li><li><code>commands+断点号 +命令列表+end</code>当断点触发时运行的命令列表中的命令，有利于自动测试</li></ul>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">commands 断点号</span><br><span class="line">  command-list</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h5 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h5><p>信号是一种软中断，是一种处理异步事件的方法。一般来说，操作系统都支持许多信号。尤其是UNIX，比较重要应用程序一般都会处理信号。UNIX 定义了许多信号，比如SIGINT表示中断字符信号，也就是Ctrl+C的信号，SIGBUS表示硬件故障的信号；SIGCHLD表示子进程状态改变信号；SIGKILL表示终止程序运行的信号，等等。信号量编程是UNIX 下非常重要的一种技术。</p><p>定义GDB在调试过程中，当收到某种信号时的动作/停下/打印信息等等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handle+信号+处理方式</span><br></pre></td></tr></table></figure><p>处理方式：</p><p><code>Nostop</code>-不停下，但打印信息</p><p><code>stop</code>-停下</p><p>   <code>noprint</code>-不打印信息</p><p>   <code>pass</code></p><p><code>noignore</code>-GDB不处理该信号，交给被测程序处理</p><p><code>nopass</code></p><p><code>ignore</code>-不让被测程序处理</p><p><code>info signals</code></p><p><code>info handle</code></p><p>查看哪些信号被GDB检测中</p><h5 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h5><p>GDB可以指定断点在某一线程上**<code>break+行号+thread+线程ID</code>**</p><p>线程ID需要通过GDB查看，命令**<code>info threads</code>**</p><p>多线程调试时，可以取消线程轮转来进行单步调试（断到具体的函数，取消轮转，单步调试）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) set scheduler-locking on</span><br><span class="line">(gdb) set scheduler-locking off</span><br></pre></td></tr></table></figure><h3 id="检查信息"><a href="#检查信息" class="headerlink" title="检查信息"></a>检查信息</h3><h5 id="栈信息"><a href="#栈信息" class="headerlink" title="栈信息"></a>栈信息</h5><p>查看栈信息<code>backtrace/bt</code>可以加一个数n,表示只打印栈顶n行</p><p>查看当前栈详细信息<code>info frame/f</code></p><p>切换当前栈<code>frame/f</code>,同理加n，也可以用**<code>up和down</code>**上下移动</p><h5 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h5><p><code>forward-search 条件</code> 向前搜索</p><p><code>search 条件</code> 向后搜索</p><p><code>reverse-search 条件</code> 全局搜索</p><p>条件为正则表达式形式</p><h5 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h5><ul><li><p>查看源代码在运行时的地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info line 行号/文件名：行号/文件名：函数名</span><br></pre></td></tr></table></figure></li><li><p>查看源程序的当前执行时的机器码</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">disassemble func</span><br><span class="line"><span class="meta">#</span><span class="bash"> 会打印出函数func的汇编代码</span></span><br></pre></td></tr></table></figure></li><li><p>查看内存地址中的值</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">examine命令，简写x</span></span><br><span class="line">x n/f/u addr</span><br><span class="line"><span class="meta">#</span><span class="bash">n 是一个正整数，表示显示内存的长度，也就是说从当前地址向后显示几个地址的内容。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">f 表示显示的格式，参见上面。如果地址所指的是字符串，那么格式可以是s，如果地十是指令地址，那么格式可以是i。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">u 表示从当前地址往后请求的字节数，如果不指定的话，GDB默认是4个bytes。u 参数可以用下面的字符来代替，b 表示单字节，h 表示双字节，w 表示四字节，g 表示八字节。当我们指定了字节长度后，GDB 会从指内存定的内存地址开始，读写指定字节，并把其当作一个值取出来。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">n/f/u可以一起使用</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="自动显示"><a href="#自动显示" class="headerlink" title="自动显示"></a>自动显示</h5><p>你可以设置一些自动显示的变量，当程序停住时，或是在你单步跟踪时，这些变量会自动显示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">display 表达式</span><br><span class="line">display 地址</span><br><span class="line">display/格式 地址或表达式</span><br></pre></td></tr></table></figure><h5 id="查看寄存器"><a href="#查看寄存器" class="headerlink" title="查看寄存器"></a>查看寄存器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">info registers</span><br><span class="line"><span class="meta">#</span><span class="bash">查看寄存器的情况。（除了浮点寄存器）</span></span><br><span class="line">info all-registers</span><br><span class="line"><span class="meta">#</span><span class="bash">查看所有寄存器的情况。（包括浮点寄存器）</span></span><br><span class="line">info registers &lt;regname ...&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash">查看所指定的寄存器的情况。</span></span><br></pre></td></tr></table></figure><h3 id="改变程序的运行"><a href="#改变程序的运行" class="headerlink" title="改变程序的运行"></a>改变程序的运行</h3><h5 id="修改变量值"><a href="#修改变量值" class="headerlink" title="修改变量值"></a>修改变量值</h5><p>修改程序运行时的变量值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print x=4</span><br></pre></td></tr></table></figure><p>如果变量名和gdb参数冲突，可以使用<code>set var</code> 告诉GDB这个是程序的变量名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set var width=47</span><br></pre></td></tr></table></figure><p><strong>在有些时候GDB并不会报告这类错误，因此都推荐使用<code>set var</code>的格式修改变量值</strong></p><h5 id="跳转执行"><a href="#跳转执行" class="headerlink" title="跳转执行"></a>跳转执行</h5><p>GDB提供了修改程序的执行顺序的功能，跳转功能，直接跳转到某个语句继续执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jump 行号</span><br><span class="line">jump 代码行的内存地址</span><br></pre></td></tr></table></figure><p><strong>注：跳转并不会改变当前程序栈的内容，所以最好在一个函数内跳转，当你从一个函数跳到另一个函数，函数执行完进行弹栈操作时必然发生错误</strong></p><h5 id="产生信号量"><a href="#产生信号量" class="headerlink" title="产生信号量"></a>产生信号量</h5><p>GDB可以使用<code>singal</code>命令，在断点处由GDB产生一个信号量给被调试程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">singal &lt;singal&gt;</span><br></pre></td></tr></table></figure><h5 id="强制函数返回"><a href="#强制函数返回" class="headerlink" title="强制函数返回"></a>强制函数返回</h5><p>如果你的调试断点在某个函数中，并还有语句没有执行完，你可以使用return命令强制函数忽略后面未执行的语句并返回</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">return</span><br><span class="line">return 返回值</span><br></pre></td></tr></table></figure><h5 id="强制调用函数"><a href="#强制调用函数" class="headerlink" title="强制调用函数"></a>强制调用函数</h5><ul><li><p>call命令 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">call 函数</span><br><span class="line"><span class="meta">#</span><span class="bash">强制调用函数，并显示返回值，如果返回值时void就不显示</span></span><br></pre></td></tr></table></figure></li><li><p>print 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print 函数</span><br><span class="line"><span class="meta">#</span><span class="bash">如果函数返回void依旧会显示，并把该值存入历史数据</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/06/hello-world/"/>
      <url>/2022/01/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
