<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>随机抽样一致性（RANSAC）</title>
      <link href="/2022/01/06/sui-ji-chou-yang-yi-zhi-xing-ransac/"/>
      <url>/2022/01/06/sui-ji-chou-yang-yi-zhi-xing-ransac/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>RANSAC也叫做随机抽样一致算法，它采用迭代的方式从一组包含离群的被观测数据中估算出数学模型的参数。它是一个非确定性算法，及在一定概率下合理的算法。随着迭代次数的增加，概率也会相应增加。</p></blockquote><h2 id="基本假设"><a href="#基本假设" class="headerlink" title="基本假设"></a>基本假设</h2><ul><li>“内群”数据可以通过几组模型的参数来叙述其分布，而“离群”数据则是不适合模型化的数据。</li><li>数据会受噪声影响，噪声指的是离群，例如从极端的噪声或错误解释有关数据的测量或不正确的假设。<blockquote><p>根据假设可以得出，作者假设的场景，数据集中存在正确的点和错误的点（噪声）。其中正确的点可以用模型来表示。错误的点不适合模型的存在。而RANSAC的算法就是为了估算这个模型。</p></blockquote></li></ul><h2 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h2><p>给定数据集D，要估计的模型M，RANSAC估计模型的一般步骤：</p><ol><li>确定求解模型M，即确定模型参数p,所需要的最小数据点的个数n。由n个数据点构成的子集称为M的一个样本</li><li>从数据集中随机抽取一个样本，由该样本计算模型的一个实例$M_p(j)$，确定与$M_p(j)$之间的几何距离&lt;阈值t的数据点所构成的集合，并记为$S(M_p(j)$，称为实例$M_p(j)$的一致集。</li><li>如果在一致集$S(M_p(j))$中的数据点&gt;阈值T，则用$S(M_p(j))$从新估算模型M，并输出结果。如果&lt;阈值T，则返回步骤2</li><li>经过K次随机抽样，选择最大的一致集$S(M_p(j))$,用$S(M_p(j))$从新估计模型M，并输出结果。</li></ol><h2 id="参数细节"><a href="#参数细节" class="headerlink" title="参数细节"></a>参数细节</h2><ul><li><p>抽样次数k<br>每个样本包含的数据点个数n是确定模型参数需要的点的最小数目，例如，直线最少需要2个点，圆最少需要3个点。<br>假定：数据集中包含内点的比例是w，一个样本需要包含的点的个数为n,那么一个样本可以被称为好样本(全部的点都是内点)的概率是：$p=w^n$。那么当进行k次抽样，有一个样本是好样本的数学期望为：<br>$$<br>E(k)=1<em>w^n+2</em>(1-w^n)<em>w^n+3</em>(1-w^n)^2<em>w^n+···<br>$$<br>w^n$$<br>因此：<br>$$<br>\begin{aligned}<br>E(k)&amp;=1</em>w^n+2*(1-w^n)<em>w^n+3</em>(1-w^n)^2<em>w^n+\cdots\<br>&amp;=w^n</em>(1+2*(1-w^n)+3*(1-w^n)^2+\cdots)\<br>&amp;=w^n*(\frac{x}{1+x})^\prime\left.\right|_{x=1-w^n}=w^{-n}<br>\end{aligned}<br>$$<br>所以为了保证得到一个好样本，抽样次数K应该大于$w^{-n}$。很正常会想到K的标准差SD(K)，即抽样次数$K=E(K)+3SD(K)$，就可以保证得到一个好样本的概率非常大。<br>$$<br>SD(K)=\dfrac{\sqrt{1-w^n}}{w^n}<br>$$<br>因此<br>$$<br>K=\dfrac{1+3\sqrt{1-w^n}}{w^n}<br>$$<br>以上是一种获得K的方法，下面我将会介绍另一种方法。即使得K次抽样中所有样本均为坏样本的概率非常低。以保证获得一个好样本的概率非常大。记Z为在K次抽样中所有样本均为坏样本的概率，则：<br>$$<br>Z=(1-w^n)^K<br>$$<br>所以：$$K=\dfrac{logz}{log(1-w^n)}$$</p><p>所以：</p><p>$$<br>K=\dfrac{logz}{log(1-w^n)}<br>$$</p><p>因此<br>$$<br>K=\dfrac{1+3\sqrt{1-w^n}}{w^n}<br>$$<br>以上是一种获得K的方法，下面我将会介绍另一种方法。即使得K次抽样中所有样本均为坏样本的概率非常低。以保证获得一个好样本的概率非常大。记Z为在K次抽样中所有样本均为坏样本的概率，则：<br>$$<br>Z=(1-w^n)^K<br>$$<br>所以：<br>$$<br>K=\dfrac{logz}{log(1-w^n)}<br>$$<br>所以：<br>$$<br>K=\dfrac{logz}{log(1-w^n)}<br>$$<br>所以为了保证得到一个好样本，抽样次数K应该大于$w^{-n}$。很正常会想到K的标准差SD(K)，即抽样次数$K=E(K)+3SD(K)$，就可以保证得到一个好样本的概率非常大。<br>$$SD(K)=\dfrac{\sqrt{1-w^n}}{w^n}$$<br>因此$$K=\dfrac{1+3\sqrt{1-w^n}}{w^n}$$<br>以上是一种获得K的方法，下面我将会介绍另一种方法。即使得K次抽样中所有样本均为坏样本的概率非常低。以保证获得一个好样本的概率非常大。记Z为在K次抽样中所有样本均为坏样本的概率，则：<br>$$<br>Z=(1-w^n)^K<br>$$<br>所以：</p><p>所以：<br>$$<br>K=\dfrac{logz}{log(1-w^n)}<br>$$</p></li><li><p>距离阈值t<br>如果我们希望所选取的阈值t使得内点杯接受的概率为$\alpha$,则需要通过内点到模型的几何距离的概率分布来计算阈值t，这是非常困难的。实际中，<strong>距离阈值通常靠经验选取</strong>。</p></li><li><p>终止阈值<br>顾名思义，终止阈值就是用过终止抽样的。通常的做法是：给出内点比例$w$的一个估计值$\varepsilon$,如果一致集的大小相当于数据集的内殿规模时终止。但是，很难给出一个比较准确的$w$估计值，所以这种做法往往不能获得比较好的估计结果。<br>所以下面介绍自适应算法：</p><ol><li><p>对内点比例做最保守估计$w=w_0$(如$w_0=0.1$,这意味着在数据点集中可能有90%的外点）应用公式<br> $$<br> K=\dfrac{1+3\sqrt{1-w^n}}{w^n}<br> $$<br> 或者<br> $$<br> K=\dfrac{logz}{log(1-w^n)}<br> $$<br> 得到抽样次数K的初始值$K_0$;</p></li><li><p>抽样并更新$w_0,K_0$，令当前抽样的一致集所含的数据点占据整个数据集的比例为$w$，若$w&gt;w_0$,则更新$w_0:=w$,并应用以上公式更新抽样次数$K_0$；否则保持原来的$w_0,K_0$；</p></li><li><p>如果抽样次数已经达到或者超过$K_0$,则终止抽样，否则，返回步骤2。<br>可以得出，在抽样过程中，抽样次数是单调下降的，否则，抽样过程比终止。</p></li></ol></li><li><p>最终估计<br>以上的方法做下来，我们将得到的是一个区分完成的数据集（内群和离群）。我们将利用估计出来的内群计算一个模型$M_p$。但是，这个过程的缺点是会将内点和外点的区分变得不明确，这是因为将距离阈值应用于当前的最大一致集估计$M_p$时，很可能将有些点变成内点。解决这个问题的方法是：由内点估计得到模型$M_p$,由$M_p$应用距离阈值从新划分内点和外点；重复以上步骤，直到内点集收敛。</p></li></ul><h2 id="图像拼接"><a href="#图像拼接" class="headerlink" title="图像拼接"></a>图像拼接</h2><p>在经典的图像拼接算法中，需要对特征点进行配对。采用的模型简单来说为“根据4对特征点计算出单应矩阵，而后计算图1上所有对应的特征点经过这个‘单应矩阵’变化后得到的图片1和图2上的距离之和“（当然也是越小越好）。<br>根据上面的介绍：我们的n=4,模型M=H，点于点之间的几何距离被定义为：$$d_i=\sum_i(d(p_i,H^{-1}p_i\prime)^2+d(p_i\prime,HP_i)^2)$$<br>我们根据经验将距离阈值设为3，即$t=3$<br>下面介绍图像拼接的具体步骤：</p><ol><li>图像读入，取特征点，匹配。</li><li>不妨假定$w_0=0.1$,和$z=0.02$,根据两个参数求$K_0$。</li><li>随机选择4对特征点求解单应性矩阵，即计算$H_{cur}$</li><li>根据我们获得的单应性矩阵$H_{cur}$计算每一对匹配点的距离误差$d_i$,统计所有$d_i&lt;t$的特征点对，其个数即为当前模型的内点个数$M_{inlier}$。计算$w=M_{inlier}/M$，如果$w&gt;w_0$，则令$w_o=w$并从新计算抽样次数$K_0$。</li><li>若抽样次数达到$K_0$,则结束抽样，否则返回步骤3</li><li>结束抽样后，从所有的一致集中挑出$M_{inlier}$最大的那个一致集。根据这个一致集估计相应的模型，得到的变换矩阵H，并根据这个变换矩阵继续计算一致集，再根据新的一致集计算模型，如此循环迭代，直到一致集的内容不再发生变化。得出相应的H矩阵。</li><li>根据H矩阵拼接图像。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/06/hello-world/"/>
      <url>/2022/01/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
